import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';

export async function POST(request) {
    try {
        const data = await request.json();
        const { name, phone, email, message } = data;
        const chatIds = process.env.TELEGRAM_CHAT_IDS.split(',')

        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if (!name || !phone) {
            return NextResponse.json(
                { error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
                { status: 400 }
            );
        }

        // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—á–µ—Ä–µ–∑ Fetch API)
        // const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`;
        // await fetch(telegramUrl, {
        //     method: 'POST',
        //     headers: { 'Content-Type': 'application/json' },
        //     body: JSON.stringify({
        //         chat_id: process.env.TELEGRAM_CHAT_ID,
        //         text: `üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nEmail: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}`
        //     })
        // });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã
        const sendPromises = chatIds.map(chatId =>
            fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: chatId.trim(),
                    text: `üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: ${data.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n–°—Ç—Ä–∞–Ω–∞: ${data.country || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`
                })
            })
        )

        // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Email (—á–µ—Ä–µ–∑ Nodemailer)
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASSWORD
            }
        });

        await transporter.sendMail({
            from: `"Kuchen Form" <${process.env.EMAIL_USER}>`,
            to: process.env.EMAIL_TO,
            subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ Kuchen',
            text: `–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nEmail: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–Ω–µ—Ç'}`
        });

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
            { status: 500 }
        );
    }
}